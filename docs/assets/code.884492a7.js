let n=document.createElement("style");n.innerHTML="",document.head.appendChild(n);export default'> 组件代码需遵循 vue.js 官方风格指南：[**https://cn.vuejs.org/v2/style-guide/**](https://cn.vuejs.org/v2/style-guide/)\n\n### 1. 每个组件都需要以**单独文件夹**的形式，存放在 /src/components/ 下。\n\n例：/src/components/button/index.uve\n\n### 2. 组件名为多个单词时，使用 **横线连接 (kebab-case)**。\n\n例：nav-bar\n\n### 3. 和父组件紧密耦合的子组件应该以父组件名作为前缀命名。\n\n例：picker、picker-date、picker-time\n\n### 4. JS/JSX 中的组件名使用 **大驼峰(PascalCase) **\n\n```javascript\nimport MxInput from "./input";\n\nexport default {\n  name: "MxInput",\n  // ...\n};\n```\n\n### 5. 使用 matrix 组件时，必须以 mx- 为开头\n\n```html\n<mx-form>\n  <mx-picker-date />\n  <mx-button>提交</mx-button>\n</mx-form>\n```\n\n### 6. Prop 的定义应该尽量详细，至少需要指定其类型。\n\n```javascript\nprops: {\n  value: {\n    type: String,\n    default: \'提交\',\n  }\n}\n```\n\n### 7. 在声明 prop 的时候，其命名应该始终使用 **小驼峰(camelCase)**，而在模板和 JSX 中应该始终使用 **横线连接 (kebab-case)**。\n\n```javascript\nprops: {\n  openType: {\n    type: String,\n  }\n}\n```\n\n```html\n<mx-button open-type="getUserInfo" />\n```\n\n### 8. 在组件上总是必须用 key 配合 v-for，以便维护内部组件及其子树的状态。\n\n```html\n<ul>\n  <li v-for="item in options" :key="item.id">\n    {{ item.label }}\n  </li>\n</ul>\n```\n\n### 9. 永远不要把 `v-if` 和 `v-for` 同时用在同一个元素上\n\n> 当 Vue 处理指令时，`v-for` 比 `v-if` 具有更高的优先级，\n\n> 因此哪怕我们只渲染出一小部分的元素，也得在每次重渲染的时候遍历整个列表，请先处理好数据，再使用 v-for\n\n### 10. 指令缩写，用 `:` 表示 `v-bind:`、用 `@` 表示 `v-on:` 和用 `#` 表示 `v-slot:`\n\n### 11. **组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。**\n\n```javascript\n// 反例\n{\n  {\n    fullName\n      .split(" ")\n      .map(function (word) {\n        return word[0].toUpperCase() + word.slice(1);\n      })\n      .join(" ");\n  }\n}\n```\n\n应使用以下方式：\n\n```html\n\x3c!---- 在模板中 ----\x3e\n{{ normalizedFullName }}\n```\n\n```javascript\n// 复杂表达式已经移入一个计算属性\ncomputed: {\n  normalizedFullName: function () {\n    return this.fullName.split(\' \').map(function (word) {\n      return word[0].toUpperCase() + word.slice(1)\n    }).join(\' \')\n  }\n}\n```\n\n### 12. **非空 HTML attribute 值应该始终带引号**\n\n```html\n<mx-button :style="{ width: buttunWidth + \'rpx\' }" />\n```\n\n### 13. 单文件组件的 最外层元素 需要遵循以下顺序：\n\n```text\n- template\n\n- script\n\n- style\n```\n\n### 14. 开发组件时，options 需要遵循以下顺序\n\n```text\n- name\n\n- directives\n\n- filters\n\n- mixins\n\n- props\n\n- data\n\n- computed\n\n- watch\n\n- beforeCreate\n\n- created\n\n- beforeMountmounted\n\n- beforeUpdate\n\n- updated\n\n- activated\n\n- deactivated\n\n- beforeDestroy\n\n- destroyed\n\n- methods\n```\n\n### 15. 引用组件时，attribute 需要遵循以下顺序\n\n```text\n- is\n\n- v-for\n\n- v-if\n\n- v-else-if\n\n- v-else\n\n- v-show\n\n- v-cloak\n\n- v-pre\n\n- v-once\n\n- id\n\n- ref\n\n- key\n\n- v-model\n\n- v-on\n\n- v-html\n\n- v-text\n```\n';
